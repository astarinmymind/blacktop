[{"/Users/siddharthladha/Desktop/Blacktop/blacktop/client/src/index.tsx":"1","/Users/siddharthladha/Desktop/Blacktop/blacktop/client/src/SocketService.ts":"2","/Users/siddharthladha/Desktop/Blacktop/blacktop/client/src/components/App/App.tsx":"3","/Users/siddharthladha/Desktop/Blacktop/blacktop/client/src/components/main/main.tsx":"4","/Users/siddharthladha/Desktop/Blacktop/blacktop/client/src/components/player/player.tsx":"5","/Users/siddharthladha/Desktop/Blacktop/blacktop/client/src/components/lobby/lobby.js":"6","/Users/siddharthladha/Desktop/Blacktop/blacktop/client/src/components/player/PlayerStore.ts":"7","/Users/siddharthladha/Desktop/Blacktop/blacktop/client/src/components/game/game.tsx":"8","/Users/siddharthladha/Desktop/Blacktop/blacktop/client/src/components/home/home.tsx":"9","/Users/siddharthladha/Desktop/Blacktop/blacktop/client/src/services/GameService.ts":"10","/Users/siddharthladha/Desktop/Blacktop/blacktop/client/src/components/card/card.tsx":"11","/Users/siddharthladha/Desktop/Blacktop/blacktop/client/src/components/board/board.tsx":"12","/Users/siddharthladha/Desktop/Blacktop/blacktop/client/src/components/card/CardTypes.ts":"13"},{"size":684,"mtime":1606661387429,"results":"14","hashOfConfig":"15"},{"size":560,"mtime":1606431742805,"results":"16","hashOfConfig":"15"},{"size":396,"mtime":1607101661645,"results":"17","hashOfConfig":"15"},{"size":1024,"mtime":1607277397128,"results":"18","hashOfConfig":"15"},{"size":661,"mtime":1606431742810,"results":"19","hashOfConfig":"15"},{"size":7300,"mtime":1607277397127,"results":"20","hashOfConfig":"15"},{"size":2143,"mtime":1607277397128,"results":"21","hashOfConfig":"15"},{"size":7431,"mtime":1607282740915,"results":"22","hashOfConfig":"15"},{"size":5274,"mtime":1607277397126,"results":"23","hashOfConfig":"15"},{"size":235,"mtime":1606431742864,"results":"24","hashOfConfig":"15"},{"size":3885,"mtime":1607277397123,"results":"25","hashOfConfig":"15"},{"size":612,"mtime":1607101661650,"results":"26","hashOfConfig":"15"},{"size":46,"mtime":1607101661651,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},"19mp6mh",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"31"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"31"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"31"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},"/Users/siddharthladha/Desktop/Blacktop/blacktop/client/src/index.tsx",["62","63","64"],"/*\nNote: We wrap App in Provider to pass all store instances to all child components wrapped within.\n*/\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport 'semantic-ui-css/semantic.min.css'\nimport App from \"./components/App/App\"\n// import { CardProvider } from './components/card/card';\nimport { PlayerProvider } from \"./components/player/player\";\nimport { SocketService } from './SocketService';\nimport { ChatContext } from './ChatContext';\n\nconst chat = new SocketService();\n\nReactDOM.render(\n    <BrowserRouter>\n        <Route component={App} />\n    </BrowserRouter>,\n    document.getElementById(\"root\")\n);",["65","66"],"/Users/siddharthladha/Desktop/Blacktop/blacktop/client/src/SocketService.ts",[],"/Users/siddharthladha/Desktop/Blacktop/blacktop/client/src/components/App/App.tsx",[],"/Users/siddharthladha/Desktop/Blacktop/blacktop/client/src/components/main/main.tsx",["67","68"],"import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport Home from '../home/home';\nimport Lobby from '../lobby/lobby';\nimport Game from '../game/game';\n\nimport { usePlayerStore } from '../player/player';\n\nimport GameService from '../../services/GameService';\n\nconst gs = new GameService();\n\nconst Main = () => {\n\n  const {playerStore} = usePlayerStore();\n\n  const [dummy, setDummy] = React.useState({});\n  React.useEffect(() => {\n\t \n    //This is for when the client recieves its own hand from the server\n    gs.socket.on(\"playerHand\", function(data) {\n      console.log(\"player hand rendered\")\n      playerStore.playerHand = data.hand;\n      setDummy({});\n    });\n    \n  }, []);\n\n\n  return (\n    <Switch> {/* The Switch decides which component to show based on the current URL.*/}\n      <Route exact path='/' component={Home}></Route>\n      <Route exact path='/lobby' component={Lobby}></Route>\n      <Route exact path='/game' component={Game}></Route>\n    </Switch>\n  );\n}\n\nexport default Main;","/Users/siddharthladha/Desktop/Blacktop/blacktop/client/src/components/player/player.tsx",[],"/Users/siddharthladha/Desktop/Blacktop/blacktop/client/src/components/lobby/lobby.js",["69","70"],"import React from 'react';\nimport { useObserver } from 'mobx-react-lite'\nimport { usePlayerStore } from '../player/player'\nimport { Link } from \"react-router-dom\";\nimport './lobby.css';\nimport TestLogo     from '../../images/TestLogo.png';\nimport ChalkLine    from '../../images/ChalkLine.png';\nimport Brickshay    from '../../images/Brickshay.gif';\nimport Dragon       from '../../images/Dragon.gif';\nimport Frog         from '../../images/Frog.gif';\nimport Goblin       from '../../images/Goblin.gif';\nimport Monkey       from '../../images/Monkey.gif';\nimport Mouse        from '../../images/Mouse.gif';\nimport PlushCat     from '../../images/PlushCat.gif';\nimport Seagull      from '../../images/Seagull.gif';\nimport Slug         from '../../images/Slug.gif';\nimport Tangerine    from '../../images/Tangerine.gif';\nimport Werewolf     from '../../images/Werewolf.gif';\n// import src from '*.avif';\nimport GameService from '../../services/GameService';\n\nconst gs = new GameService();\n\nexport const Lobby = () => {\n    // gets store\n    const {playerStore} = usePlayerStore();\n    \n    function idToIcon (iconId) {\n        switch (iconId) {\n            case 1:\n                return Dragon;\n            case 2:\n                return Frog;\n            case 3:\n                return Goblin;\n            case 4:\n                return Monkey;\n            case 5:\n                return Mouse;\n            case 6:\n                return PlushCat;\n            case 7:\n                return Seagull;\n            case 8:\n                return Slug;\n            case 9:\n                return Tangerine;\n            case 10:\n                return Werewolf;\n            case 11:\n                return Brickshay;\n            default:\n                return Brickshay;\n        }\n    }\n\n    const [name, setName] = React.useState(\"\");\n    const [iconId, setIconId] = React.useState(Brickshay);\n    const updateName = (event) => { \n        if (!playerStore.gameStarted) {\n            sendPlayer(event.target.value, iconId);\n            setName(event.target.value);\n        }\n        else {\n            alert(\"The game has already started! Click \\\"Enter game\\\" to join.\");\n        }\n    }\n    const updateIcon = (newIconId) => {\n        if (!playerStore.gameStarted) { \n            sendPlayer(name, newIconId);\n            setIconId(newIconId);\n        }\n        else {\n            alert(\"The game has already started! Click \\\"Enter game\\\" to join.\");\n        }\n    }\n\n    // Sends the player's name and icon to socket and playerStore\n\tfunction sendPlayer(newName, newIconId) {\n\t\tvar pack = [ newName, playerStore.lobbyId, newIconId ];\n        gs.socket.emit(\"playerName\", pack);\n\n        if (!playerStore.players[playerStore.currentPlayerIndex])\n        {\n            playerStore.addPlayer();\n        }\n        playerStore.players[playerStore.currentPlayerIndex].setPlayer(newName, idToIcon(newIconId));\n    }\n\n    const [dummy, setDummy] = React.useState({});\n    \n    React.useEffect(() => {\n        gs.socket.emit(\"enterLobby\", playerStore.lobbyId);\n\n        gs.socket.on(\"updateNames\", function(data) {\n            playerStore.players = [];\n            Object.keys(data).forEach(key => {\n                console.log(\"added player\");\n                playerStore.addPlayer(key);\n            });\n            \n            Object.entries(data).forEach(entry => {\n                console.log(\"data: \", data);\n                const [key, value] = entry;\n                playerStore.setID(value[0], parseInt(key))\n                playerStore.setName(value[1], parseInt(key));\n                playerStore.setIcon(idToIcon(value[2]), parseInt(key));\n            });\n\n            setDummy({}); // Needed because Lobby doesn't re-render automatically after above change(s)\n        })\n\n        gs.socket.on(\"startGame\", function(data) {\n            playerStore.gameStarted = true;\n        })\n    }, []);\n\n    // emits socket event that player has pressed start game\n    function startGame() \n    {\n        console.log(playerStore.gameStarted);\n        if (!name) {\n            sendPlayer(\" \", iconId);\n            setName(\" \");\n        }\n\n        if (!playerStore.gameStarted) {\n            gs.socket.emit(\"gameStarted\", playerStore.lobbyId);\n            console.log(playerStore.lobbyId);\n        }\n    }\n\n    return useObserver(() => (\n        <div style={{backgroundColor: \"rgb(14, 14, 14)\", margin: 0, minHeight: '100vh'}}>\n            <img src={ TestLogo } alt=\"logo\" className=\"logo\" />\n            <img src={ ChalkLine } alt=\"line\" className=\"line\" />\n            <div className=\"lobby-columns\">\n                <div style={{textAlign: \"right\"}}>\n                    <h1>Game Code: </h1>\n                    <h1>Name: </h1>\n                    <h1>Icon: </h1>\n                </div>\n                <div>\n                    <h1>{playerStore.lobbyId}</h1>\n                    <input \n                        name=\"name\" \n                        type=\"text\" \n                        maxLength={12} \n                        placeholder=\"Type name here\" \n                        value={name}\n                        onChange={updateName}\n                    />\n                    <div className=\"icon-gallery\">\n                        <>\n                            <img alt=\"\" src={Brickshay} onClick={() => updateIcon(0)}/>\n                            <img alt=\"\" src={Dragon}    onClick={() => updateIcon(1)}/>\n                            <img alt=\"\" src={Frog}      onClick={() => updateIcon(2)}/>\n                            <img alt=\"\" src={Goblin}    onClick={() => updateIcon(3)}/>\n                        </>\n                        <>\n                            <img alt=\"\" src={Monkey}    onClick={() => updateIcon(4)}/>\n                            <img alt=\"\" src={Mouse}     onClick={() => updateIcon(5)}/>\n                            <img alt=\"\" src={PlushCat}  onClick={() => updateIcon(6)}/>\n                            <img alt=\"\" src={Seagull}   onClick={() => updateIcon(7)}/>\n                        </>\n                        <>\n                            <img alt=\"\" src={Slug} onClick={() => updateIcon(8)}/>\n                            <img alt=\"\" src={Tangerine}  onClick={() => updateIcon(9)}/>\n                            <img alt=\"\" src={Werewolf}  onClick={() => updateIcon(10)}/>\n                            <img alt=\"\" src={Brickshay} onClick={() => updateIcon(11)}/>\n                        </>\n                    </div>\n                </div>\n                <div>\n                    <div className=\"list\">\n                        {playerStore.getPlayers().map((element, i) => \n                            <li style={{ listStyleType: \"none\" }} key={i}>\n                                <br />\n                                <img src={element.icon} alt={`Player ${i+1}`} />\n                                {element.name}\n                                <br />\n                            </li>\n                        )}\n                    </div>\n                    <br />\n                    <br />\n                    <Link to={{ pathname: '/game', state:{ consent:'true'} }} >\n                        <button onClick={startGame}>Enter game</button>\n                    </Link>\n                </div>\n            </div>\n        </div>\n    ));\n};\n\nexport default Lobby;",["71","72"],"/Users/siddharthladha/Desktop/Blacktop/blacktop/client/src/components/player/PlayerStore.ts",[],"/Users/siddharthladha/Desktop/Blacktop/blacktop/client/src/components/game/game.tsx",["73","74","75","76","77","78","79","80","81","82","83","84"],"/*\nNotes: \n  -useObserver: used to observe values from store\n  -React Fragment (notation: <> </> )  \n    - allows component to return multiple elements\n    - let you group a list of children without adding extra nodes to the DOM\n*/\n\n// import { CardStore } from \"../card/CardStore\";\n  \n//export const Game = () => {\nimport React from \"react\";\nimport { usePlayerStore } from '../player/player';\nimport { useObserver } from 'mobx-react-lite';\nimport { Card } from '../card/card';\nimport { Board } from '../board/board';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport { Link } from \"react-router-dom\";\nimport './game.css';\nimport NopeCard from '../../images/TestCard.png';\nimport SkipCard from '../../images/SkipCard.png';\nimport AddCard from '../../images/ADD1.png';\nimport SubCard from '../../images/Minus10.png';\nimport DrawCard from '../../images/DrawCard.png';\nimport GiveCard from '../../images/GiveCard.png';\nimport SeeCard from '../../images/PeekCard.png';\nimport StealCard from '../../images/StealCard.png'\nimport TestLogo from '../../images/TestLogo.png';\nimport ChalkLine from '../../images/ChalkLine.png';\nimport Brickshay from '../../images/Brickshay.gif'\n\nimport GameService from '../../services/GameService';\nimport { getPositionOfLineAndCharacter } from \"typescript\";\n\nconst gs = new GameService();\n\n//Just a random ID i used to test that each client was different\n// var id = Math.floor(Math.random() * 100);\n\n//address of the server\nexport const Game = () => {\n\t//this is syntax I use to set variables, setTitle being the way to change them\n\n  // gets store\n  // const {cardStore} = useCardStore()\n  const {playerStore} = usePlayerStore();\n\n  // emits socket event that player has pressed start game\n  function startGame() \n  {\n    gs.socket.emit(\"gameStarted\", playerStore.lobbyId);\n  }\n\n  // emits socket event that player has pressed end turn\n  function endTurn() \n  {\n    gs.socket.emit(\"cardDrawn\", playerStore.lobbyId, playerStore.currentPlayerIndex);\n    gs.socket.emit(\"turnEnded\", playerStore.lobbyId, playerStore.currentPlayerIndex);\n    textLog.push(playerStore.players[playerStore.currentPlayerIndex].name, ' ended their turn. \\n')\n    textLog.push('it is now ', playerStore.players[(playerStore.currentPlayerIndex+1)%playerStore.players.length].name, '\\'s turn. \\n')\n  }\n\n  function setImage(cardname) \n  {\n    switch (cardname.type) {\n        case \"nope\":\n            return NopeCard;\n        case \"add\":\n            return AddCard;\n        case \"subtract\":\n            return SubCard;\n        case \"give\":\n            return GiveCard;\n        case \"see future\":\n            return SeeCard;\n        case \"draw 2\":\n            return DrawCard;\n        case \"skip\":\n            return SkipCard;\n        default: \n            break;\n    }\n    return;\n  }\n\n  function sendNotification(event: string) \n  {\n    switch (event) {\n      case \"nopeEvent\":\n          break;\n      case \"giveEvent\":\n          break;\n      case \"seefutureEvent\":\n          break;\n      default: \n          break;\n    }\n  }\n   \n   const [gameEvent, setGameEvent] = React.useState({});\n   const [lastFive, setLastFive] = React.useState([{}, {}, {}, {}, {}]);\n   const [victorIndex, setVictorIndex] = React.useState(0);\n   const [gameFinished, setGameFinished] = React.useState(false);\n   const [dummy, setDummy] = React.useState({});\n   React.useEffect(() => {\n\n    // update player hand after draw/play Card Event\n    gs.socket.on(\"updatePlayerHand\", function(data) {\n        playerStore.playerHand = data;\n        setDummy({});\n    });\n\n    // update player points \n    gs.socket.on(\"allScores\", function(data) {\n      console.log(data)\n      playerStore.point = data;\n      setDummy({});\n    });\n\n    // event notification: nope, give, see, draw event\n    gs.socket.on(\"eventNotification\", function(data) {\n        console.log(data[0])\n        console.log(data[1])\n        var name = playerStore.players[data[0]].name\n        textLog.push(name, ' ', 'played ', data[1].type, '\\n')\n        setDummy({});\n    });\n\n    // @NICK: last card played for display\n    gs.socket.on(\"lastCardPlayed\", function(data) {\n      setLastFive([data, lastFive[0], lastFive[1], lastFive[2], lastFive[3]]);\n    });\n    \n    // This is for when the client recieves another hand from the server\n    gs.socket.on(\"otherHand\", function(data) {\n    });\n\n    // A winner is decided and the index of the victorious player is passed in\n    gs.socket.on(\"results\", function(data) {\n      setVictorIndex(data);\n      setGameFinished(true);\n    });\n\n    gs.socket.on(\"turnCount\", function(data) {\n      playerStore.turnNumber = data;\n    });\n  }, []);\n  \n  const [textLog, setTextLog] = React.useState([\"Welcome to Blacktop!\\n\"]);\n  function eventsLog() {\n    return (\n      <div className=\"events-box\">\n        <html>\n          {textLog}\n        </html>\n      </div>\n    );\n  }\n  \n  function gamePage() {\n    return (\n      // renders an unordered list of cards\n      //button with the variable grabbed from the server\n      <DndProvider backend={HTML5Backend}>\n        <div style={{backgroundColor: \"rgb(14, 14, 14)\", margin: 0, height: '100vh'}} className=\"sendNotification\">\n          <div className=\"game-columns\">\n            <div>\n              <img src={playerStore.players[playerStore.currentPlayerIndex].icon} className=\"flip-img\" alt=\"Current Player\" />\n              <h1>{playerStore.players[playerStore.currentPlayerIndex].name}</h1>\n              <div>\n                <button onClick={endTurn}>Draw & End Turn</button>\n              </div>\n            </div>\n            <div style={{display: 'flex'}}>\n              <Board />\n              {eventsLog()}\n            </div>\n            <div className=\"list\">\n              {playerStore.getPlayers().map((element, i) => \n                <li style={{ listStyleType: \"none\" }} key={i}>\n                  <img alt=\"icon\" src={element.icon}/>\n                  {element.name}\n                </li>\n              )}\n            </div>\n            {/* <div>\n              {playerStore.getPoints().map((point) => \n                <li>{point}</li>\n              )}\n            </div> */}\n          </div>\n          <div className=\"hand\">\n            {/* <img src={NopeCard} alt=\"icon\"/> */}\n            {playerStore.getPlayerHand().map((card) => \n                <Card name={card} src={setImage(card)}/>\n            )}\n          </div>\n        </div>\n      </DndProvider>\n    );\n  }\n\n  function resultsPage() {\n    // playerStore.gameStarted = false;\n    \n    return(\n      <div style={{backgroundColor: \"rgb(14, 14, 14)\", margin: 0, minHeight: '100vh'}}>\n        <img src={ TestLogo } alt=\"logo\" className=\"logo\" />\n        <img src={ ChalkLine } alt=\"line\" className=\"line\" />\n        <div className=\"results\">\n          <h1>{playerStore.players[victorIndex].name === playerStore.players[playerStore.currentPlayerIndex].name ? \"Victory!\" : \"Defeat!\"}</h1>\n          <img src={playerStore.players[victorIndex].icon} alt=\"Victor\" />\n          <h1>{playerStore.players[victorIndex].name}</h1>\n          <Link to={{ pathname: '/', state:{ consent:'true'} }} >\n            <button>Go Home</button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  return useObserver(() => (\n    false ? resultsPage() : gamePage()\n  ));\n}\nexport default Game;\n\nfunction sendId() {\n\t//sending the ID to the server so you can print it\n\t//socket.emit(\"ID\", id);\n}","/Users/siddharthladha/Desktop/Blacktop/blacktop/client/src/components/home/home.tsx",["85"],"import React, { useEffect } from \"react\";\nimport { useObserver } from 'mobx-react-lite'\nimport { Link } from \"react-router-dom\";\nimport './home.css';\nimport TestLogo from '../../images/TestLogo.png';\nimport TestCard from '../../images/TestCard.png';\nimport ChalkLine from '../../images/ChalkLine.png';\nimport PlushCat from '../../images/PlushCat.gif';\nimport Werewolf from '../../images/Werewolf.gif';\nimport GameService from '../../services/GameService';\nimport { usePlayerStore } from '../player/player'\n\nconst gs = new GameService();\n\nexport const Home = () => {     \n    const {playerStore} = usePlayerStore();\n    \n    // Create a lobby when Host Game is clicked\n\tfunction makeLobby() \n\t{\n\t\tvar lobbyId = Math.floor(100000 + Math.random() * 900000);\n\t\tgs.socket.emit(\"makeLobby\", lobbyId);\n        playerStore.lobbyId = lobbyId;\n    }\n    \n    const [lobbyId, setLobbyId] = React.useState(\"\");\n    const updateLobbyId = (event: React.ChangeEvent<HTMLInputElement>) => { \n        const re = /^[0-9\\b]+$/;\n\n        // if value is not blank, then test the regex for digits only\n        if (event.target.value === '' || re.test(event.target.value)) {\n            setLobbyId(event.target.value);\n            gs.socket.emit(\"validId\", event.target.value);\n            console.log(event.target.value);\n        }\n    }\n\n    // If valid, send entered Lobby ID to socket to be checked if it is valid\n    function sendLobbyId() {\n        if (!lobbyId || !isVaildId) {\n            alert(\"You must enter a valid, 6-digit game code!\");\n        }\n        else {\n            gs.socket.emit(\"joinLobby\", lobbyId);\n            playerStore.lobbyId = parseInt(lobbyId);\n        }\n    }\n\n    const [isVaildId, setIsValidId] = React.useState(false);\n    useEffect(() => {\n        // Set local state to the validity of the entered Lobby ID\n        gs.socket.on(\"valID\", function(data) {\n            setIsValidId(data);\n        })\n\n        gs.socket.on(\"playerIndex\", function(data) {\n            playerStore.currentPlayerIndex = data;\n        })\n    }, []);\n    \n    // A link that is only active if the lobby ID is valid\n    const ConditionalLink = () => isVaildId\n      ? <Link to=\"/lobby\"><button onClick={ sendLobbyId }>Join game</button></Link>\n      : <><button onClick={ sendLobbyId }>Join game</button></>;\n    console.log(isVaildId);\n\n    return useObserver(() => (\n        <div style={{backgroundColor: \"rgb(14, 14, 14)\", minHeight: '100vh', margin: 0}}>\n            <img src={ TestLogo } alt=\"logo\" className=\"logo\" />\n            <img src={ ChalkLine } alt=\"line\" className=\"line\" />\n            <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n                <Link to=\"/lobby\">\n                    <button onClick={ makeLobby }>Host game</button>\n                </Link>\n                <input \n                    name=\"lobbyId\" \n                    type=\"text\" \n                    maxLength={6} \n                    placeholder=\"Lobby code\" \n                    value={ lobbyId }\n                    onChange={ updateLobbyId }\n                />\n                <ConditionalLink />\n            </div>\n                <br />\n                <br />\n            <div className=\"home-columns\">\n                <div>\n                </div>\n                <div>\n                    <h1>Welcome to Blacktop!</h1>\n                    Blacktop is a game about deception, strategy, and sabotage! \n                    <br />Each player brings with them a personalized side deck to assist them as they try to not get kazaap'd!\n                    <br />You can join a public game or play a private game with your friends!\n                    <br />\n                </div>\n                <div>\n                    <img src={PlushCat} alt=\"\" />\n                </div>\n            </div>\n            <div className=\"home-columns\">\n                <div>\n                    <img src={Werewolf} alt=\"\" />\n                </div>\n                <div>\n                    <h1>Rules</h1>\n                    The goal of the game is to get your point total as close to 100 at the end of the final round without going over. \n                    The game is split up into rounds, with each round consisting of 3 turns. \n                    There are point cards, action cards, and bomb cards. \n                    During a turn, each player has the option to play cards, and then they must draw. \n                    At the end of each round, if a player’s point total is a multiple of ten, a special effect happens based on which ten they are on. \n                    The final round starts the first time a player’s point total is over a hundred at the end of the round.\n                    <br />\n                    <h2>Play Cards</h2>\n                    <br />\n                    <h2>Special Effects</h2>\n                    <br />\n                </div>\n                <div>\n                </div>\n            </div>\n            <div className=\"home-columns\">\n                <div>\n                </div>\n                <div>\n                    <h1>Cards</h1>\n                    <br />\n                </div>\n                <div>\n                    <img src={TestCard} alt=\"\" />\n                </div>\n            </div>\n        </div>\n    ));\n}\n\nexport default Home;","/Users/siddharthladha/Desktop/Blacktop/blacktop/client/src/services/GameService.ts",[],"/Users/siddharthladha/Desktop/Blacktop/blacktop/client/src/components/card/card.tsx",[],"/Users/siddharthladha/Desktop/Blacktop/blacktop/client/src/components/board/board.tsx",[],"/Users/siddharthladha/Desktop/Blacktop/blacktop/client/src/components/card/CardTypes.ts",[],["86","87"],{"ruleId":"88","severity":1,"message":"89","line":11,"column":10,"nodeType":"90","messageId":"91","endLine":11,"endColumn":24},{"ruleId":"88","severity":1,"message":"92","line":13,"column":10,"nodeType":"90","messageId":"91","endLine":13,"endColumn":21},{"ruleId":"88","severity":1,"message":"93","line":15,"column":7,"nodeType":"90","messageId":"91","endLine":15,"endColumn":11},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"88","severity":1,"message":"98","line":18,"column":10,"nodeType":"90","messageId":"91","endLine":18,"endColumn":15},{"ruleId":"99","severity":1,"message":"100","line":28,"column":6,"nodeType":"101","endLine":28,"endColumn":8,"suggestions":"102"},{"ruleId":"103","severity":1,"message":"98","line":90,"column":12,"nodeType":"90","messageId":"91","endLine":90,"endColumn":17},{"ruleId":"99","severity":1,"message":"100","line":116,"column":8,"nodeType":"101","endLine":116,"endColumn":10,"suggestions":"104"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"88","severity":1,"message":"105","line":28,"column":8,"nodeType":"90","messageId":"91","endLine":28,"endColumn":17},{"ruleId":"88","severity":1,"message":"106","line":31,"column":8,"nodeType":"90","messageId":"91","endLine":31,"endColumn":17},{"ruleId":"88","severity":1,"message":"107","line":34,"column":10,"nodeType":"90","messageId":"91","endLine":34,"endColumn":39},{"ruleId":"88","severity":1,"message":"108","line":50,"column":12,"nodeType":"90","messageId":"91","endLine":50,"endColumn":21},{"ruleId":"88","severity":1,"message":"109","line":87,"column":12,"nodeType":"90","messageId":"91","endLine":87,"endColumn":28},{"ruleId":"88","severity":1,"message":"110","line":101,"column":11,"nodeType":"90","messageId":"91","endLine":101,"endColumn":20},{"ruleId":"88","severity":1,"message":"111","line":101,"column":22,"nodeType":"90","messageId":"91","endLine":101,"endColumn":34},{"ruleId":"88","severity":1,"message":"112","line":104,"column":11,"nodeType":"90","messageId":"91","endLine":104,"endColumn":23},{"ruleId":"88","severity":1,"message":"98","line":105,"column":11,"nodeType":"90","messageId":"91","endLine":105,"endColumn":16},{"ruleId":"99","severity":1,"message":"113","line":148,"column":6,"nodeType":"101","endLine":148,"endColumn":8,"suggestions":"114"},{"ruleId":"88","severity":1,"message":"115","line":150,"column":19,"nodeType":"90","messageId":"91","endLine":150,"endColumn":29},{"ruleId":"88","severity":1,"message":"116","line":229,"column":10,"nodeType":"90","messageId":"91","endLine":229,"endColumn":16},{"ruleId":"99","severity":1,"message":"117","line":59,"column":8,"nodeType":"101","endLine":59,"endColumn":10,"suggestions":"118"},{"ruleId":"94","replacedBy":"119"},{"ruleId":"96","replacedBy":"120"},"@typescript-eslint/no-unused-vars","'PlayerProvider' is defined but never used.","Identifier","unusedVar","'ChatContext' is defined but never used.","'chat' is assigned a value but never used.","no-native-reassign",["121"],"no-negated-in-lhs",["122"],"'dummy' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'playerStore'. Either include it or remove the dependency array.","ArrayExpression",["123"],"no-unused-vars",["124"],"'StealCard' is defined but never used.","'Brickshay' is defined but never used.","'getPositionOfLineAndCharacter' is defined but never used.","'startGame' is defined but never used.","'sendNotification' is defined but never used.","'gameEvent' is assigned a value but never used.","'setGameEvent' is assigned a value but never used.","'gameFinished' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'lastFive', 'playerStore', and 'textLog'. Either include them or remove the dependency array. You can also do a functional update 'setLastFive(l => ...)' if you only need 'lastFive' in the 'setLastFive' call.",["125"],"'setTextLog' is assigned a value but never used.","'sendId' is defined but never used.","React Hook useEffect has a missing dependency: 'playerStore'. Either include it or remove the dependency array.",["126"],["121"],["122"],"no-global-assign","no-unsafe-negation",{"desc":"127","fix":"128"},{"desc":"127","fix":"129"},{"desc":"130","fix":"131"},{"desc":"127","fix":"132"},"Update the dependencies array to be: [playerStore]",{"range":"133","text":"134"},{"range":"135","text":"134"},"Update the dependencies array to be: [lastFive, playerStore, textLog]",{"range":"136","text":"137"},{"range":"138","text":"134"},[703,705],"[playerStore]",[3886,3888],[4672,4674],"[lastFive, playerStore, textLog]",[2035,2037]]